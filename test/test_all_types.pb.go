// Code generated by protoc-gen-go. DO NOT EDIT.
// source: test/test_all_types.proto

/*
Package test is a generated protocol buffer package.

It is generated from these files:
	test/test_all_types.proto

It has these top-level messages:
	TestAllTypes
	NestedTestAllTypes
*/
package test

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/any"
import google_protobuf1 "github.com/golang/protobuf/ptypes/duration"
import google_protobuf2 "github.com/golang/protobuf/ptypes/struct"
import google_protobuf3 "github.com/golang/protobuf/ptypes/timestamp"
import google_protobuf4 "github.com/golang/protobuf/ptypes/wrappers"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type GlobalEnum int32

const (
	GlobalEnum_GOO GlobalEnum = 0
	GlobalEnum_GAR GlobalEnum = 1
	GlobalEnum_GAZ GlobalEnum = 2
)

var GlobalEnum_name = map[int32]string{
	0: "GOO",
	1: "GAR",
	2: "GAZ",
}
var GlobalEnum_value = map[string]int32{
	"GOO": 0,
	"GAR": 1,
	"GAZ": 2,
}

func (x GlobalEnum) String() string {
	return proto.EnumName(GlobalEnum_name, int32(x))
}
func (GlobalEnum) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type TestAllTypes_NestedEnum int32

const (
	TestAllTypes_FOO TestAllTypes_NestedEnum = 0
	TestAllTypes_BAR TestAllTypes_NestedEnum = 1
	TestAllTypes_BAZ TestAllTypes_NestedEnum = 2
)

var TestAllTypes_NestedEnum_name = map[int32]string{
	0: "FOO",
	1: "BAR",
	2: "BAZ",
}
var TestAllTypes_NestedEnum_value = map[string]int32{
	"FOO": 0,
	"BAR": 1,
	"BAZ": 2,
}

func (x TestAllTypes_NestedEnum) String() string {
	return proto.EnumName(TestAllTypes_NestedEnum_name, int32(x))
}
func (TestAllTypes_NestedEnum) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

type TestAllTypes struct {
	SingleInt32        int32                        `protobuf:"varint,1,opt,name=single_int32,json=singleInt32" json:"single_int32,omitempty"`
	SingleInt64        int64                        `protobuf:"varint,2,opt,name=single_int64,json=singleInt64" json:"single_int64,omitempty"`
	SingleUint32       uint32                       `protobuf:"varint,3,opt,name=single_uint32,json=singleUint32" json:"single_uint32,omitempty"`
	SingleUint64       uint64                       `protobuf:"varint,4,opt,name=single_uint64,json=singleUint64" json:"single_uint64,omitempty"`
	SingleSint32       int32                        `protobuf:"zigzag32,5,opt,name=single_sint32,json=singleSint32" json:"single_sint32,omitempty"`
	SingleSint64       int64                        `protobuf:"zigzag64,6,opt,name=single_sint64,json=singleSint64" json:"single_sint64,omitempty"`
	SingleFixed32      uint32                       `protobuf:"fixed32,7,opt,name=single_fixed32,json=singleFixed32" json:"single_fixed32,omitempty"`
	SingleFixed64      uint64                       `protobuf:"fixed64,8,opt,name=single_fixed64,json=singleFixed64" json:"single_fixed64,omitempty"`
	SingleSfixed32     int32                        `protobuf:"fixed32,9,opt,name=single_sfixed32,json=singleSfixed32" json:"single_sfixed32,omitempty"`
	SingleSfixed64     int64                        `protobuf:"fixed64,10,opt,name=single_sfixed64,json=singleSfixed64" json:"single_sfixed64,omitempty"`
	SingleFloat        float32                      `protobuf:"fixed32,11,opt,name=single_float,json=singleFloat" json:"single_float,omitempty"`
	SingleDouble       float64                      `protobuf:"fixed64,12,opt,name=single_double,json=singleDouble" json:"single_double,omitempty"`
	SingleBool         bool                         `protobuf:"varint,13,opt,name=single_bool,json=singleBool" json:"single_bool,omitempty"`
	SingleString       string                       `protobuf:"bytes,14,opt,name=single_string,json=singleString" json:"single_string,omitempty"`
	SingleBytes        []byte                       `protobuf:"bytes,15,opt,name=single_bytes,json=singleBytes,proto3" json:"single_bytes,omitempty"`
	SingleAny          *google_protobuf.Any         `protobuf:"bytes,100,opt,name=single_any,json=singleAny" json:"single_any,omitempty"`
	SingleDuration     *google_protobuf1.Duration   `protobuf:"bytes,101,opt,name=single_duration,json=singleDuration" json:"single_duration,omitempty"`
	SingleTimestamp    *google_protobuf3.Timestamp  `protobuf:"bytes,102,opt,name=single_timestamp,json=singleTimestamp" json:"single_timestamp,omitempty"`
	SingleStruct       *google_protobuf2.Struct     `protobuf:"bytes,103,opt,name=single_struct,json=singleStruct" json:"single_struct,omitempty"`
	SingleValue        *google_protobuf2.Value      `protobuf:"bytes,104,opt,name=single_value,json=singleValue" json:"single_value,omitempty"`
	SingleInt64Wrapper *google_protobuf4.Int64Value `protobuf:"bytes,105,opt,name=single_int64_wrapper,json=singleInt64Wrapper" json:"single_int64_wrapper,omitempty"`
	// Types that are valid to be assigned to NestedType:
	//	*TestAllTypes_SingleNestedMessage
	//	*TestAllTypes_SingleNestedEnum
	NestedType            isTestAllTypes_NestedType     `protobuf_oneof:"nested_type"`
	RepeatedInt32         []int32                       `protobuf:"varint,31,rep,packed,name=repeated_int32,json=repeatedInt32" json:"repeated_int32,omitempty"`
	RepeatedInt64         []int64                       `protobuf:"varint,32,rep,packed,name=repeated_int64,json=repeatedInt64" json:"repeated_int64,omitempty"`
	RepeatedUint32        []uint32                      `protobuf:"varint,33,rep,packed,name=repeated_uint32,json=repeatedUint32" json:"repeated_uint32,omitempty"`
	RepeatedUint64        []uint64                      `protobuf:"varint,34,rep,packed,name=repeated_uint64,json=repeatedUint64" json:"repeated_uint64,omitempty"`
	RepeatedSint32        []int32                       `protobuf:"zigzag32,35,rep,packed,name=repeated_sint32,json=repeatedSint32" json:"repeated_sint32,omitempty"`
	RepeatedSint64        []int64                       `protobuf:"zigzag64,36,rep,packed,name=repeated_sint64,json=repeatedSint64" json:"repeated_sint64,omitempty"`
	RepeatedFixed32       []uint32                      `protobuf:"fixed32,37,rep,packed,name=repeated_fixed32,json=repeatedFixed32" json:"repeated_fixed32,omitempty"`
	RepeatedFixed64       []uint64                      `protobuf:"fixed64,38,rep,packed,name=repeated_fixed64,json=repeatedFixed64" json:"repeated_fixed64,omitempty"`
	RepeatedSfixed32      []int32                       `protobuf:"fixed32,39,rep,packed,name=repeated_sfixed32,json=repeatedSfixed32" json:"repeated_sfixed32,omitempty"`
	RepeatedSfixed64      []int64                       `protobuf:"fixed64,40,rep,packed,name=repeated_sfixed64,json=repeatedSfixed64" json:"repeated_sfixed64,omitempty"`
	RepeatedFloat         []float32                     `protobuf:"fixed32,41,rep,packed,name=repeated_float,json=repeatedFloat" json:"repeated_float,omitempty"`
	RepeatedDouble        []float64                     `protobuf:"fixed64,42,rep,packed,name=repeated_double,json=repeatedDouble" json:"repeated_double,omitempty"`
	RepeatedBool          []bool                        `protobuf:"varint,43,rep,packed,name=repeated_bool,json=repeatedBool" json:"repeated_bool,omitempty"`
	RepeatedString        []string                      `protobuf:"bytes,44,rep,name=repeated_string,json=repeatedString" json:"repeated_string,omitempty"`
	RepeatedBytes         [][]byte                      `protobuf:"bytes,45,rep,name=repeated_bytes,json=repeatedBytes,proto3" json:"repeated_bytes,omitempty"`
	RepeatedNestedMessage []*TestAllTypes_NestedMessage `protobuf:"bytes,48,rep,name=repeated_nested_message,json=repeatedNestedMessage" json:"repeated_nested_message,omitempty"`
	RepeatedNestedEnum    []TestAllTypes_NestedEnum     `protobuf:"varint,51,rep,packed,name=repeated_nested_enum,json=repeatedNestedEnum,enum=google.api.tools.expr.test.TestAllTypes_NestedEnum" json:"repeated_nested_enum,omitempty"`
	RepeatedStringPiece   []string                      `protobuf:"bytes,54,rep,name=repeated_string_piece,json=repeatedStringPiece" json:"repeated_string_piece,omitempty"`
	RepeatedCord          []string                      `protobuf:"bytes,55,rep,name=repeated_cord,json=repeatedCord" json:"repeated_cord,omitempty"`
	RepeatedLazyMessage   []*TestAllTypes_NestedMessage `protobuf:"bytes,57,rep,name=repeated_lazy_message,json=repeatedLazyMessage" json:"repeated_lazy_message,omitempty"`
	MapStringString       map[string]string             `protobuf:"bytes,58,rep,name=map_string_string,json=mapStringString" json:"map_string_string,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MapInt64NestedType    map[int64]*NestedTestAllTypes `protobuf:"bytes,59,rep,name=map_int64_nested_type,json=mapInt64NestedType" json:"map_int64_nested_type,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *TestAllTypes) Reset()                    { *m = TestAllTypes{} }
func (m *TestAllTypes) String() string            { return proto.CompactTextString(m) }
func (*TestAllTypes) ProtoMessage()               {}
func (*TestAllTypes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type isTestAllTypes_NestedType interface {
	isTestAllTypes_NestedType()
}

type TestAllTypes_SingleNestedMessage struct {
	SingleNestedMessage *TestAllTypes_NestedMessage `protobuf:"bytes,18,opt,name=single_nested_message,json=singleNestedMessage,oneof"`
}
type TestAllTypes_SingleNestedEnum struct {
	SingleNestedEnum TestAllTypes_NestedEnum `protobuf:"varint,21,opt,name=single_nested_enum,json=singleNestedEnum,enum=google.api.tools.expr.test.TestAllTypes_NestedEnum,oneof"`
}

func (*TestAllTypes_SingleNestedMessage) isTestAllTypes_NestedType() {}
func (*TestAllTypes_SingleNestedEnum) isTestAllTypes_NestedType()    {}

func (m *TestAllTypes) GetNestedType() isTestAllTypes_NestedType {
	if m != nil {
		return m.NestedType
	}
	return nil
}

func (m *TestAllTypes) GetSingleInt32() int32 {
	if m != nil {
		return m.SingleInt32
	}
	return 0
}

func (m *TestAllTypes) GetSingleInt64() int64 {
	if m != nil {
		return m.SingleInt64
	}
	return 0
}

func (m *TestAllTypes) GetSingleUint32() uint32 {
	if m != nil {
		return m.SingleUint32
	}
	return 0
}

func (m *TestAllTypes) GetSingleUint64() uint64 {
	if m != nil {
		return m.SingleUint64
	}
	return 0
}

func (m *TestAllTypes) GetSingleSint32() int32 {
	if m != nil {
		return m.SingleSint32
	}
	return 0
}

func (m *TestAllTypes) GetSingleSint64() int64 {
	if m != nil {
		return m.SingleSint64
	}
	return 0
}

func (m *TestAllTypes) GetSingleFixed32() uint32 {
	if m != nil {
		return m.SingleFixed32
	}
	return 0
}

func (m *TestAllTypes) GetSingleFixed64() uint64 {
	if m != nil {
		return m.SingleFixed64
	}
	return 0
}

func (m *TestAllTypes) GetSingleSfixed32() int32 {
	if m != nil {
		return m.SingleSfixed32
	}
	return 0
}

func (m *TestAllTypes) GetSingleSfixed64() int64 {
	if m != nil {
		return m.SingleSfixed64
	}
	return 0
}

func (m *TestAllTypes) GetSingleFloat() float32 {
	if m != nil {
		return m.SingleFloat
	}
	return 0
}

func (m *TestAllTypes) GetSingleDouble() float64 {
	if m != nil {
		return m.SingleDouble
	}
	return 0
}

func (m *TestAllTypes) GetSingleBool() bool {
	if m != nil {
		return m.SingleBool
	}
	return false
}

func (m *TestAllTypes) GetSingleString() string {
	if m != nil {
		return m.SingleString
	}
	return ""
}

func (m *TestAllTypes) GetSingleBytes() []byte {
	if m != nil {
		return m.SingleBytes
	}
	return nil
}

func (m *TestAllTypes) GetSingleAny() *google_protobuf.Any {
	if m != nil {
		return m.SingleAny
	}
	return nil
}

func (m *TestAllTypes) GetSingleDuration() *google_protobuf1.Duration {
	if m != nil {
		return m.SingleDuration
	}
	return nil
}

func (m *TestAllTypes) GetSingleTimestamp() *google_protobuf3.Timestamp {
	if m != nil {
		return m.SingleTimestamp
	}
	return nil
}

func (m *TestAllTypes) GetSingleStruct() *google_protobuf2.Struct {
	if m != nil {
		return m.SingleStruct
	}
	return nil
}

func (m *TestAllTypes) GetSingleValue() *google_protobuf2.Value {
	if m != nil {
		return m.SingleValue
	}
	return nil
}

func (m *TestAllTypes) GetSingleInt64Wrapper() *google_protobuf4.Int64Value {
	if m != nil {
		return m.SingleInt64Wrapper
	}
	return nil
}

func (m *TestAllTypes) GetSingleNestedMessage() *TestAllTypes_NestedMessage {
	if x, ok := m.GetNestedType().(*TestAllTypes_SingleNestedMessage); ok {
		return x.SingleNestedMessage
	}
	return nil
}

func (m *TestAllTypes) GetSingleNestedEnum() TestAllTypes_NestedEnum {
	if x, ok := m.GetNestedType().(*TestAllTypes_SingleNestedEnum); ok {
		return x.SingleNestedEnum
	}
	return TestAllTypes_FOO
}

func (m *TestAllTypes) GetRepeatedInt32() []int32 {
	if m != nil {
		return m.RepeatedInt32
	}
	return nil
}

func (m *TestAllTypes) GetRepeatedInt64() []int64 {
	if m != nil {
		return m.RepeatedInt64
	}
	return nil
}

func (m *TestAllTypes) GetRepeatedUint32() []uint32 {
	if m != nil {
		return m.RepeatedUint32
	}
	return nil
}

func (m *TestAllTypes) GetRepeatedUint64() []uint64 {
	if m != nil {
		return m.RepeatedUint64
	}
	return nil
}

func (m *TestAllTypes) GetRepeatedSint32() []int32 {
	if m != nil {
		return m.RepeatedSint32
	}
	return nil
}

func (m *TestAllTypes) GetRepeatedSint64() []int64 {
	if m != nil {
		return m.RepeatedSint64
	}
	return nil
}

func (m *TestAllTypes) GetRepeatedFixed32() []uint32 {
	if m != nil {
		return m.RepeatedFixed32
	}
	return nil
}

func (m *TestAllTypes) GetRepeatedFixed64() []uint64 {
	if m != nil {
		return m.RepeatedFixed64
	}
	return nil
}

func (m *TestAllTypes) GetRepeatedSfixed32() []int32 {
	if m != nil {
		return m.RepeatedSfixed32
	}
	return nil
}

func (m *TestAllTypes) GetRepeatedSfixed64() []int64 {
	if m != nil {
		return m.RepeatedSfixed64
	}
	return nil
}

func (m *TestAllTypes) GetRepeatedFloat() []float32 {
	if m != nil {
		return m.RepeatedFloat
	}
	return nil
}

func (m *TestAllTypes) GetRepeatedDouble() []float64 {
	if m != nil {
		return m.RepeatedDouble
	}
	return nil
}

func (m *TestAllTypes) GetRepeatedBool() []bool {
	if m != nil {
		return m.RepeatedBool
	}
	return nil
}

func (m *TestAllTypes) GetRepeatedString() []string {
	if m != nil {
		return m.RepeatedString
	}
	return nil
}

func (m *TestAllTypes) GetRepeatedBytes() [][]byte {
	if m != nil {
		return m.RepeatedBytes
	}
	return nil
}

func (m *TestAllTypes) GetRepeatedNestedMessage() []*TestAllTypes_NestedMessage {
	if m != nil {
		return m.RepeatedNestedMessage
	}
	return nil
}

func (m *TestAllTypes) GetRepeatedNestedEnum() []TestAllTypes_NestedEnum {
	if m != nil {
		return m.RepeatedNestedEnum
	}
	return nil
}

func (m *TestAllTypes) GetRepeatedStringPiece() []string {
	if m != nil {
		return m.RepeatedStringPiece
	}
	return nil
}

func (m *TestAllTypes) GetRepeatedCord() []string {
	if m != nil {
		return m.RepeatedCord
	}
	return nil
}

func (m *TestAllTypes) GetRepeatedLazyMessage() []*TestAllTypes_NestedMessage {
	if m != nil {
		return m.RepeatedLazyMessage
	}
	return nil
}

func (m *TestAllTypes) GetMapStringString() map[string]string {
	if m != nil {
		return m.MapStringString
	}
	return nil
}

func (m *TestAllTypes) GetMapInt64NestedType() map[int64]*NestedTestAllTypes {
	if m != nil {
		return m.MapInt64NestedType
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*TestAllTypes) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _TestAllTypes_OneofMarshaler, _TestAllTypes_OneofUnmarshaler, _TestAllTypes_OneofSizer, []interface{}{
		(*TestAllTypes_SingleNestedMessage)(nil),
		(*TestAllTypes_SingleNestedEnum)(nil),
	}
}

func _TestAllTypes_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*TestAllTypes)
	// nested_type
	switch x := m.NestedType.(type) {
	case *TestAllTypes_SingleNestedMessage:
		b.EncodeVarint(18<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SingleNestedMessage); err != nil {
			return err
		}
	case *TestAllTypes_SingleNestedEnum:
		b.EncodeVarint(21<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.SingleNestedEnum))
	case nil:
	default:
		return fmt.Errorf("TestAllTypes.NestedType has unexpected type %T", x)
	}
	return nil
}

func _TestAllTypes_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*TestAllTypes)
	switch tag {
	case 18: // nested_type.single_nested_message
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TestAllTypes_NestedMessage)
		err := b.DecodeMessage(msg)
		m.NestedType = &TestAllTypes_SingleNestedMessage{msg}
		return true, err
	case 21: // nested_type.single_nested_enum
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.NestedType = &TestAllTypes_SingleNestedEnum{TestAllTypes_NestedEnum(x)}
		return true, err
	default:
		return false, nil
	}
}

func _TestAllTypes_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*TestAllTypes)
	// nested_type
	switch x := m.NestedType.(type) {
	case *TestAllTypes_SingleNestedMessage:
		s := proto.Size(x.SingleNestedMessage)
		n += proto.SizeVarint(18<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *TestAllTypes_SingleNestedEnum:
		n += proto.SizeVarint(21<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.SingleNestedEnum))
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type TestAllTypes_NestedMessage struct {
	Bb int32 `protobuf:"varint,1,opt,name=bb" json:"bb,omitempty"`
}

func (m *TestAllTypes_NestedMessage) Reset()                    { *m = TestAllTypes_NestedMessage{} }
func (m *TestAllTypes_NestedMessage) String() string            { return proto.CompactTextString(m) }
func (*TestAllTypes_NestedMessage) ProtoMessage()               {}
func (*TestAllTypes_NestedMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

func (m *TestAllTypes_NestedMessage) GetBb() int32 {
	if m != nil {
		return m.Bb
	}
	return 0
}

type NestedTestAllTypes struct {
	Child   *NestedTestAllTypes `protobuf:"bytes,1,opt,name=child" json:"child,omitempty"`
	Payload *TestAllTypes       `protobuf:"bytes,2,opt,name=payload" json:"payload,omitempty"`
}

func (m *NestedTestAllTypes) Reset()                    { *m = NestedTestAllTypes{} }
func (m *NestedTestAllTypes) String() string            { return proto.CompactTextString(m) }
func (*NestedTestAllTypes) ProtoMessage()               {}
func (*NestedTestAllTypes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *NestedTestAllTypes) GetChild() *NestedTestAllTypes {
	if m != nil {
		return m.Child
	}
	return nil
}

func (m *NestedTestAllTypes) GetPayload() *TestAllTypes {
	if m != nil {
		return m.Payload
	}
	return nil
}

func init() {
	proto.RegisterType((*TestAllTypes)(nil), "google.api.tools.expr.test.TestAllTypes")
	proto.RegisterType((*TestAllTypes_NestedMessage)(nil), "google.api.tools.expr.test.TestAllTypes.NestedMessage")
	proto.RegisterType((*NestedTestAllTypes)(nil), "google.api.tools.expr.test.NestedTestAllTypes")
	proto.RegisterEnum("google.api.tools.expr.test.GlobalEnum", GlobalEnum_name, GlobalEnum_value)
	proto.RegisterEnum("google.api.tools.expr.test.TestAllTypes_NestedEnum", TestAllTypes_NestedEnum_name, TestAllTypes_NestedEnum_value)
}

func init() { proto.RegisterFile("test/test_all_types.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1143 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x56, 0x6d, 0x73, 0xdb, 0x44,
	0x17, 0xcd, 0x7a, 0xf3, 0xba, 0xb1, 0x13, 0x67, 0x1b, 0x3f, 0xd9, 0xf8, 0x61, 0x9a, 0x6d, 0x42,
	0xc9, 0xb6, 0x05, 0x87, 0x89, 0x85, 0xa0, 0x05, 0x66, 0x88, 0xc9, 0x4b, 0x99, 0x21, 0x34, 0xa3,
	0x04, 0x98, 0xe1, 0x8b, 0x47, 0xb6, 0x37, 0xae, 0x07, 0x59, 0xd2, 0x58, 0x12, 0x54, 0xfd, 0x23,
	0x7c, 0xe3, 0xb7, 0x32, 0xda, 0x17, 0x79, 0x25, 0x91, 0x4e, 0x1b, 0xbe, 0x78, 0xa4, 0xbb, 0xe7,
	0x9e, 0x7b, 0xef, 0x91, 0xee, 0x91, 0xd1, 0x6e, 0xcc, 0xa3, 0xf8, 0x28, 0xfb, 0xe9, 0xbb, 0x9e,
	0xd7, 0x8f, 0xd3, 0x90, 0x47, 0x9d, 0x70, 0x16, 0xc4, 0x01, 0x6e, 0x8f, 0x83, 0x60, 0xec, 0xf1,
	0x8e, 0x1b, 0x4e, 0x3a, 0x71, 0x10, 0x78, 0x51, 0x87, 0xbf, 0x09, 0x67, 0x9d, 0x0c, 0xdb, 0xde,
	0x95, 0x67, 0x47, 0x02, 0x39, 0x48, 0x6e, 0x8f, 0x5c, 0x3f, 0x95, 0x69, 0xed, 0x87, 0xe5, 0xa3,
	0x51, 0x32, 0x73, 0xe3, 0x49, 0xe0, 0xab, 0xf3, 0x8f, 0xca, 0xe7, 0x51, 0x3c, 0x4b, 0x86, 0xb1,
	0x3a, 0xdd, 0x2b, 0x9f, 0xc6, 0x93, 0x29, 0x8f, 0x62, 0x77, 0x1a, 0xde, 0x45, 0xff, 0xe7, 0xcc,
	0x0d, 0x43, 0x3e, 0x53, 0x5d, 0xef, 0xff, 0xd5, 0x42, 0xf5, 0x1b, 0x1e, 0xc5, 0x27, 0x9e, 0x77,
	0x93, 0x0d, 0x83, 0x1f, 0xa1, 0x7a, 0x34, 0xf1, 0xc7, 0x1e, 0xef, 0x4f, 0xfc, 0xb8, 0x7b, 0x4c,
	0x00, 0x05, 0x6c, 0xc9, 0x59, 0x97, 0xb1, 0x1f, 0xb2, 0x50, 0x11, 0x62, 0x5b, 0xa4, 0x46, 0x01,
	0x83, 0x06, 0xc4, 0xb6, 0xf0, 0x01, 0x6a, 0x28, 0x48, 0x22, 0x69, 0x20, 0x05, 0xac, 0xe1, 0xa8,
	0xbc, 0x9f, 0x45, 0xac, 0x04, 0xb2, 0x2d, 0xb2, 0x48, 0x01, 0x5b, 0x34, 0x41, 0x05, 0xa6, 0x48,
	0x32, 0x2d, 0x51, 0xc0, 0xb6, 0x34, 0xe8, 0xba, 0xcc, 0x14, 0x49, 0xa6, 0x65, 0x0a, 0x18, 0x36,
	0x41, 0xb6, 0x85, 0x1f, 0xa3, 0x0d, 0x05, 0xba, 0x9d, 0xbc, 0xe1, 0xa3, 0xee, 0x31, 0x59, 0xa1,
	0x80, 0xad, 0x38, 0x2a, 0xf5, 0x5c, 0x06, 0xcb, 0x30, 0xdb, 0x22, 0xab, 0x14, 0xb0, 0xe5, 0x02,
	0xcc, 0xb6, 0xf0, 0x21, 0xda, 0xd4, 0x25, 0x35, 0xdd, 0x1a, 0x05, 0x6c, 0xd3, 0x51, 0xd9, 0xd7,
	0x2a, 0x5a, 0x01, 0xda, 0x16, 0x41, 0x14, 0xb0, 0x66, 0x11, 0x68, 0x5b, 0x86, 0xac, 0xb7, 0x5e,
	0xe0, 0xc6, 0x64, 0x9d, 0x02, 0x56, 0xd3, 0xb2, 0x9e, 0x67, 0x21, 0x63, 0xce, 0x51, 0x90, 0x0c,
	0x3c, 0x4e, 0xea, 0x14, 0x30, 0xa0, 0xe7, 0x3c, 0x15, 0x31, 0xbc, 0x87, 0x54, 0x4e, 0x7f, 0x10,
	0x04, 0x1e, 0x69, 0x50, 0xc0, 0x56, 0x1d, 0x24, 0x43, 0xbd, 0x20, 0xf0, 0x4c, 0xb5, 0xe2, 0xd9,
	0xc4, 0x1f, 0x93, 0x0d, 0x0a, 0xd8, 0x5a, 0xae, 0x96, 0x88, 0x19, 0xdd, 0x0c, 0xd2, 0x98, 0x47,
	0x64, 0x93, 0x02, 0x56, 0xd7, 0xdd, 0xf4, 0xb2, 0x10, 0xee, 0x22, 0xc5, 0xda, 0x77, 0xfd, 0x94,
	0x8c, 0x28, 0x60, 0xeb, 0xc7, 0xdb, 0x1d, 0xb5, 0x06, 0xfa, 0x85, 0xeb, 0x9c, 0xf8, 0xa9, 0xb3,
	0x26, 0x71, 0x27, 0x7e, 0x8a, 0x7b, 0xb9, 0x1c, 0xfa, 0x45, 0x27, 0x5c, 0x64, 0xee, 0x56, 0x32,
	0x4f, 0x15, 0x40, 0x2b, 0xa5, 0xef, 0xf1, 0x19, 0x6a, 0x2a, 0x8e, 0xfc, 0x75, 0x27, 0xb7, 0x82,
	0xa4, 0x5d, 0x21, 0xb9, 0xd1, 0x08, 0x47, 0xd5, 0xcd, 0x03, 0xf8, 0x1b, 0x53, 0x87, 0x64, 0x18,
	0x93, 0xb1, 0xe0, 0xd8, 0xa9, 0x70, 0x5c, 0x8b, 0x63, 0x43, 0xa0, 0x64, 0x18, 0xe3, 0xe7, 0xb9,
	0x40, 0x7f, 0xb8, 0x5e, 0xc2, 0xc9, 0x6b, 0x91, 0xfc, 0xbf, 0x4a, 0xf2, 0x2f, 0xd9, 0xa9, 0x16,
	0x4e, 0xdc, 0xe0, 0x4b, 0xb4, 0x6d, 0x2e, 0x50, 0x5f, 0xed, 0x24, 0x99, 0x08, 0x8a, 0xff, 0x57,
	0x28, 0xc4, 0x4e, 0x49, 0x1e, 0x6c, 0x6c, 0xd9, 0xaf, 0x32, 0x0d, 0x7b, 0xa8, 0xa5, 0xe8, 0x7c,
	0x1e, 0xc5, 0x7c, 0xd4, 0x9f, 0xf2, 0x28, 0x72, 0xc7, 0x9c, 0x60, 0xc1, 0x67, 0x77, 0xee, 0x76,
	0xa6, 0x8e, 0xb9, 0xfb, 0x9d, 0x9f, 0x44, 0xfa, 0xa5, 0xcc, 0x7e, 0xb9, 0xe0, 0x3c, 0x90, 0xb4,
	0x85, 0x30, 0x1e, 0x22, 0x5c, 0xac, 0xc6, 0xfd, 0x64, 0x4a, 0x5a, 0x14, 0xb0, 0x8d, 0xe3, 0xee,
	0x07, 0x96, 0x3a, 0xf3, 0x93, 0xe9, 0xcb, 0x05, 0xa7, 0x69, 0xd6, 0xc9, 0x62, 0xd9, 0x12, 0xce,
	0x78, 0xc8, 0xdd, 0x8c, 0x5f, 0xae, 0xfd, 0x1e, 0x85, 0x6c, 0xc9, 0x69, 0xe8, 0xa8, 0x74, 0xa2,
	0x12, 0xcc, 0xb6, 0x08, 0xa5, 0x90, 0xc1, 0x02, 0x4c, 0xee, 0x6a, 0x0e, 0x53, 0x7e, 0xf4, 0x88,
	0x42, 0xd6, 0x70, 0xf2, 0x6c, 0xe5, 0x48, 0x65, 0xa0, 0x6d, 0x91, 0x7d, 0x0a, 0xd9, 0x62, 0x11,
	0x58, 0x62, 0x54, 0xbe, 0x74, 0x40, 0x21, 0xdb, 0x9a, 0x03, 0xaf, 0xab, 0x8c, 0xca, 0x9b, 0x3e,
	0xa6, 0x90, 0xe1, 0x22, 0xd0, 0xb6, 0xf0, 0x13, 0xd4, 0xcc, 0x81, 0xda, 0x50, 0x1e, 0x53, 0xc8,
	0x56, 0x9c, 0x9c, 0x40, 0x3b, 0x54, 0x05, 0x6a, 0x5b, 0xe4, 0x13, 0x0a, 0xd9, 0x72, 0x09, 0x6a,
	0x5b, 0xf8, 0x19, 0xda, 0x9a, 0x97, 0xd7, 0xb4, 0x87, 0x14, 0xb2, 0x4d, 0x27, 0xe7, 0xc8, 0x9d,
	0xaa, 0x0a, 0xb6, 0x2d, 0xc2, 0x28, 0x64, 0xcd, 0x32, 0x58, 0xba, 0xe9, 0xbc, 0x09, 0xe1, 0x57,
	0x4f, 0x28, 0x64, 0xb5, 0xb9, 0xf4, 0xd2, 0xb1, 0xcc, 0xf9, 0x95, 0x67, 0x3d, 0xa5, 0x90, 0x81,
	0xf9, 0xfc, 0xca, 0xb5, 0x0e, 0x50, 0x9e, 0x29, 0x7d, 0xeb, 0x19, 0x85, 0x6c, 0xd5, 0xa9, 0xeb,
	0xa0, 0x70, 0xae, 0x82, 0x9a, 0xd2, 0xbb, 0x3e, 0xa5, 0x90, 0xad, 0x19, 0x6a, 0x4a, 0xf7, 0x32,
	0xbb, 0x93, 0xfe, 0xf5, 0x19, 0x85, 0xac, 0x3e, 0xef, 0x4e, 0x3a, 0x98, 0x8f, 0x76, 0x72, 0x58,
	0x69, 0x77, 0x3e, 0xa7, 0xf0, 0xfe, 0xbb, 0xe3, 0xb4, 0x34, 0x6d, 0x71, 0x77, 0x38, 0xda, 0x2e,
	0xd7, 0x13, 0xdb, 0xd3, 0xa5, 0xf0, 0x9e, 0xdb, 0xe3, 0xe0, 0x62, 0x25, 0xb1, 0x3d, 0x36, 0x6a,
	0x95, 0x64, 0xea, 0x87, 0x13, 0x3e, 0xe4, 0xc4, 0xce, 0xc4, 0xea, 0xd5, 0x56, 0x6b, 0xce, 0x83,
	0xa2, 0x60, 0x57, 0xd9, 0x31, 0x3e, 0x34, 0x9e, 0xc1, 0x30, 0x98, 0x8d, 0xc8, 0x97, 0x0a, 0x0f,
	0xe6, 0xcf, 0xe1, 0xfb, 0x60, 0x36, 0xc2, 0xbe, 0x51, 0xc0, 0x73, 0xdf, 0xa6, 0xb9, 0x6a, 0xcf,
	0xff, 0x8b, 0x6a, 0xbd, 0x1a, 0x03, 0xf3, 0xc6, 0x7e, 0x74, 0xdf, 0xa6, 0x5a, 0xb7, 0x09, 0xda,
	0x9a, 0xba, 0xa1, 0x9e, 0x45, 0x3d, 0xf9, 0x17, 0xa2, 0xd6, 0xb7, 0xef, 0x5d, 0xeb, 0xd2, 0x0d,
	0xe5, 0xb0, 0xf2, 0xf7, 0xcc, 0x8f, 0x67, 0xa9, 0xb3, 0x39, 0x2d, 0x46, 0x71, 0x84, 0x5a, 0x59,
	0x29, 0x69, 0xcc, 0xea, 0x19, 0x65, 0x7f, 0xf3, 0xc8, 0xd7, 0xa2, 0xdc, 0x77, 0x1f, 0x52, 0x4e,
	0xb8, 0x8f, 0x1c, 0x31, 0x8b, 0xc9, 0x8a, 0x78, 0x5a, 0x39, 0x68, 0xef, 0xa1, 0x46, 0xf1, 0x45,
	0xd9, 0x40, 0xb5, 0xc1, 0x40, 0xfd, 0xf7, 0xaa, 0x0d, 0x06, 0xed, 0x1e, 0xda, 0xfe, 0xb7, 0xf6,
	0x71, 0x13, 0xc1, 0xdf, 0x79, 0x2a, 0x80, 0x6b, 0x4e, 0x76, 0x89, 0xb7, 0xd1, 0x92, 0xfc, 0x1e,
	0xd5, 0x44, 0x4c, 0xde, 0xbc, 0xa8, 0x7d, 0x05, 0xda, 0x09, 0xda, 0xb9, 0xa3, 0x27, 0x93, 0x06,
	0x4a, 0x9a, 0x53, 0x93, 0x66, 0xfd, 0xb8, 0xf3, 0xae, 0xb1, 0x15, 0x9b, 0x31, 0xbc, 0x51, 0x76,
	0xff, 0x10, 0x21, 0xe3, 0xd5, 0x5c, 0x41, 0xf0, 0xfc, 0xd5, 0xab, 0xe6, 0x42, 0x76, 0xd1, 0x3b,
	0x71, 0x9a, 0x40, 0x5e, 0xfc, 0xd6, 0xac, 0xf5, 0x1a, 0x68, 0xdd, 0xd0, 0x7b, 0xff, 0x6f, 0x80,
	0x70, 0x95, 0x39, 0x6b, 0x6c, 0xf8, 0x7a, 0xe2, 0x8d, 0x44, 0xb3, 0xf7, 0x68, 0x4c, 0x24, 0xe3,
	0x1e, 0x5a, 0x09, 0xdd, 0xd4, 0x0b, 0xdc, 0x91, 0x1a, 0x90, 0xbd, 0xef, 0x73, 0x75, 0x74, 0xe2,
	0xd3, 0x43, 0x84, 0x2e, 0xbc, 0x60, 0xe0, 0x7a, 0x7a, 0xb0, 0x0b, 0x3d, 0xd8, 0x85, 0x1e, 0xec,
	0x42, 0x0c, 0xf6, 0x05, 0x7a, 0x38, 0x0c, 0xa6, 0xef, 0x28, 0xd0, 0xdb, 0x32, 0x2b, 0x5c, 0x65,
	0x9f, 0xfd, 0x2b, 0x30, 0x58, 0x16, 0xdf, 0xff, 0xee, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x59,
	0x0a, 0xf7, 0xaa, 0x74, 0x0c, 0x00, 0x00,
}
