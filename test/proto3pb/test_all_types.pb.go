// Code generated by protoc-gen-go. DO NOT EDIT.
// source: test/proto3pb/test_all_types.proto

package proto3pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import any "github.com/golang/protobuf/ptypes/any"
import duration "github.com/golang/protobuf/ptypes/duration"
import _struct "github.com/golang/protobuf/ptypes/struct"
import timestamp "github.com/golang/protobuf/ptypes/timestamp"
import wrappers "github.com/golang/protobuf/ptypes/wrappers"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type GlobalEnum int32

const (
	GlobalEnum_GOO GlobalEnum = 0
	GlobalEnum_GAR GlobalEnum = 1
	GlobalEnum_GAZ GlobalEnum = 2
)

var GlobalEnum_name = map[int32]string{
	0: "GOO",
	1: "GAR",
	2: "GAZ",
}
var GlobalEnum_value = map[string]int32{
	"GOO": 0,
	"GAR": 1,
	"GAZ": 2,
}

func (x GlobalEnum) String() string {
	return proto.EnumName(GlobalEnum_name, int32(x))
}
func (GlobalEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_test_all_types_5b2f71f34215a338, []int{0}
}

type TestAllTypes_NestedEnum int32

const (
	TestAllTypes_FOO TestAllTypes_NestedEnum = 0
	TestAllTypes_BAR TestAllTypes_NestedEnum = 1
	TestAllTypes_BAZ TestAllTypes_NestedEnum = 2
)

var TestAllTypes_NestedEnum_name = map[int32]string{
	0: "FOO",
	1: "BAR",
	2: "BAZ",
}
var TestAllTypes_NestedEnum_value = map[string]int32{
	"FOO": 0,
	"BAR": 1,
	"BAZ": 2,
}

func (x TestAllTypes_NestedEnum) String() string {
	return proto.EnumName(TestAllTypes_NestedEnum_name, int32(x))
}
func (TestAllTypes_NestedEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_test_all_types_5b2f71f34215a338, []int{0, 0}
}

type TestAllTypes struct {
	SingleInt32         int32                 `protobuf:"varint,1,opt,name=single_int32,json=singleInt32,proto3" json:"single_int32,omitempty"`
	SingleInt64         int64                 `protobuf:"varint,2,opt,name=single_int64,json=singleInt64,proto3" json:"single_int64,omitempty"`
	SingleUint32        uint32                `protobuf:"varint,3,opt,name=single_uint32,json=singleUint32,proto3" json:"single_uint32,omitempty"`
	SingleUint64        uint64                `protobuf:"varint,4,opt,name=single_uint64,json=singleUint64,proto3" json:"single_uint64,omitempty"`
	SingleSint32        int32                 `protobuf:"zigzag32,5,opt,name=single_sint32,json=singleSint32,proto3" json:"single_sint32,omitempty"`
	SingleSint64        int64                 `protobuf:"zigzag64,6,opt,name=single_sint64,json=singleSint64,proto3" json:"single_sint64,omitempty"`
	SingleFixed32       uint32                `protobuf:"fixed32,7,opt,name=single_fixed32,json=singleFixed32,proto3" json:"single_fixed32,omitempty"`
	SingleFixed64       uint64                `protobuf:"fixed64,8,opt,name=single_fixed64,json=singleFixed64,proto3" json:"single_fixed64,omitempty"`
	SingleSfixed32      int32                 `protobuf:"fixed32,9,opt,name=single_sfixed32,json=singleSfixed32,proto3" json:"single_sfixed32,omitempty"`
	SingleSfixed64      int64                 `protobuf:"fixed64,10,opt,name=single_sfixed64,json=singleSfixed64,proto3" json:"single_sfixed64,omitempty"`
	SingleFloat         float32               `protobuf:"fixed32,11,opt,name=single_float,json=singleFloat,proto3" json:"single_float,omitempty"`
	SingleDouble        float64               `protobuf:"fixed64,12,opt,name=single_double,json=singleDouble,proto3" json:"single_double,omitempty"`
	SingleBool          bool                  `protobuf:"varint,13,opt,name=single_bool,json=singleBool,proto3" json:"single_bool,omitempty"`
	SingleString        string                `protobuf:"bytes,14,opt,name=single_string,json=singleString,proto3" json:"single_string,omitempty"`
	SingleBytes         []byte                `protobuf:"bytes,15,opt,name=single_bytes,json=singleBytes,proto3" json:"single_bytes,omitempty"`
	SingleAny           *any.Any              `protobuf:"bytes,100,opt,name=single_any,json=singleAny,proto3" json:"single_any,omitempty"`
	SingleDuration      *duration.Duration    `protobuf:"bytes,101,opt,name=single_duration,json=singleDuration,proto3" json:"single_duration,omitempty"`
	SingleTimestamp     *timestamp.Timestamp  `protobuf:"bytes,102,opt,name=single_timestamp,json=singleTimestamp,proto3" json:"single_timestamp,omitempty"`
	SingleStruct        *_struct.Struct       `protobuf:"bytes,103,opt,name=single_struct,json=singleStruct,proto3" json:"single_struct,omitempty"`
	SingleValue         *_struct.Value        `protobuf:"bytes,104,opt,name=single_value,json=singleValue,proto3" json:"single_value,omitempty"`
	SingleInt64Wrapper  *wrappers.Int64Value  `protobuf:"bytes,105,opt,name=single_int64_wrapper,json=singleInt64Wrapper,proto3" json:"single_int64_wrapper,omitempty"`
	SingleInt32Wrapper  *wrappers.Int32Value  `protobuf:"bytes,106,opt,name=single_int32_wrapper,json=singleInt32Wrapper,proto3" json:"single_int32_wrapper,omitempty"`
	SingleDoubleWrapper *wrappers.DoubleValue `protobuf:"bytes,107,opt,name=single_double_wrapper,json=singleDoubleWrapper,proto3" json:"single_double_wrapper,omitempty"`
	SingleFloatWrapper  *wrappers.FloatValue  `protobuf:"bytes,108,opt,name=single_float_wrapper,json=singleFloatWrapper,proto3" json:"single_float_wrapper,omitempty"`
	SingleUint64Wrapper *wrappers.UInt64Value `protobuf:"bytes,109,opt,name=single_uint64_wrapper,json=singleUint64Wrapper,proto3" json:"single_uint64_wrapper,omitempty"`
	SingleUint32Wrapper *wrappers.UInt32Value `protobuf:"bytes,110,opt,name=single_uint32_wrapper,json=singleUint32Wrapper,proto3" json:"single_uint32_wrapper,omitempty"`
	SingleStringWrapper *wrappers.StringValue `protobuf:"bytes,111,opt,name=single_string_wrapper,json=singleStringWrapper,proto3" json:"single_string_wrapper,omitempty"`
	SingleBoolWrapper   *wrappers.BoolValue   `protobuf:"bytes,112,opt,name=single_bool_wrapper,json=singleBoolWrapper,proto3" json:"single_bool_wrapper,omitempty"`
	SingleBytesWrapper  *wrappers.BytesValue  `protobuf:"bytes,113,opt,name=single_bytes_wrapper,json=singleBytesWrapper,proto3" json:"single_bytes_wrapper,omitempty"`
	// Types that are valid to be assigned to NestedType:
	//	*TestAllTypes_SingleNestedMessage
	//	*TestAllTypes_SingleNestedEnum
	NestedType            isTestAllTypes_NestedType     `protobuf_oneof:"nested_type"`
	RepeatedInt32         []int32                       `protobuf:"varint,31,rep,packed,name=repeated_int32,json=repeatedInt32,proto3" json:"repeated_int32,omitempty"`
	RepeatedInt64         []int64                       `protobuf:"varint,32,rep,packed,name=repeated_int64,json=repeatedInt64,proto3" json:"repeated_int64,omitempty"`
	RepeatedUint32        []uint32                      `protobuf:"varint,33,rep,packed,name=repeated_uint32,json=repeatedUint32,proto3" json:"repeated_uint32,omitempty"`
	RepeatedUint64        []uint64                      `protobuf:"varint,34,rep,packed,name=repeated_uint64,json=repeatedUint64,proto3" json:"repeated_uint64,omitempty"`
	RepeatedSint32        []int32                       `protobuf:"zigzag32,35,rep,packed,name=repeated_sint32,json=repeatedSint32,proto3" json:"repeated_sint32,omitempty"`
	RepeatedSint64        []int64                       `protobuf:"zigzag64,36,rep,packed,name=repeated_sint64,json=repeatedSint64,proto3" json:"repeated_sint64,omitempty"`
	RepeatedFixed32       []uint32                      `protobuf:"fixed32,37,rep,packed,name=repeated_fixed32,json=repeatedFixed32,proto3" json:"repeated_fixed32,omitempty"`
	RepeatedFixed64       []uint64                      `protobuf:"fixed64,38,rep,packed,name=repeated_fixed64,json=repeatedFixed64,proto3" json:"repeated_fixed64,omitempty"`
	RepeatedSfixed32      []int32                       `protobuf:"fixed32,39,rep,packed,name=repeated_sfixed32,json=repeatedSfixed32,proto3" json:"repeated_sfixed32,omitempty"`
	RepeatedSfixed64      []int64                       `protobuf:"fixed64,40,rep,packed,name=repeated_sfixed64,json=repeatedSfixed64,proto3" json:"repeated_sfixed64,omitempty"`
	RepeatedFloat         []float32                     `protobuf:"fixed32,41,rep,packed,name=repeated_float,json=repeatedFloat,proto3" json:"repeated_float,omitempty"`
	RepeatedDouble        []float64                     `protobuf:"fixed64,42,rep,packed,name=repeated_double,json=repeatedDouble,proto3" json:"repeated_double,omitempty"`
	RepeatedBool          []bool                        `protobuf:"varint,43,rep,packed,name=repeated_bool,json=repeatedBool,proto3" json:"repeated_bool,omitempty"`
	RepeatedString        []string                      `protobuf:"bytes,44,rep,name=repeated_string,json=repeatedString,proto3" json:"repeated_string,omitempty"`
	RepeatedBytes         [][]byte                      `protobuf:"bytes,45,rep,name=repeated_bytes,json=repeatedBytes,proto3" json:"repeated_bytes,omitempty"`
	RepeatedNestedMessage []*TestAllTypes_NestedMessage `protobuf:"bytes,48,rep,name=repeated_nested_message,json=repeatedNestedMessage,proto3" json:"repeated_nested_message,omitempty"`
	RepeatedNestedEnum    []TestAllTypes_NestedEnum     `protobuf:"varint,51,rep,packed,name=repeated_nested_enum,json=repeatedNestedEnum,proto3,enum=google.expr.proto3.test.TestAllTypes_NestedEnum" json:"repeated_nested_enum,omitempty"`
	RepeatedStringPiece   []string                      `protobuf:"bytes,54,rep,name=repeated_string_piece,json=repeatedStringPiece,proto3" json:"repeated_string_piece,omitempty"`
	RepeatedCord          []string                      `protobuf:"bytes,55,rep,name=repeated_cord,json=repeatedCord,proto3" json:"repeated_cord,omitempty"`
	RepeatedLazyMessage   []*TestAllTypes_NestedMessage `protobuf:"bytes,57,rep,name=repeated_lazy_message,json=repeatedLazyMessage,proto3" json:"repeated_lazy_message,omitempty"`
	MapStringString       map[string]string             `protobuf:"bytes,58,rep,name=map_string_string,json=mapStringString,proto3" json:"map_string_string,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapInt64NestedType    map[int64]*NestedTestAllTypes `protobuf:"bytes,59,rep,name=map_int64_nested_type,json=mapInt64NestedType,proto3" json:"map_int64_nested_type,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral  struct{}                      `json:"-"`
	XXX_unrecognized      []byte                        `json:"-"`
	XXX_sizecache         int32                         `json:"-"`
}

func (m *TestAllTypes) Reset()         { *m = TestAllTypes{} }
func (m *TestAllTypes) String() string { return proto.CompactTextString(m) }
func (*TestAllTypes) ProtoMessage()    {}
func (*TestAllTypes) Descriptor() ([]byte, []int) {
	return fileDescriptor_test_all_types_5b2f71f34215a338, []int{0}
}
func (m *TestAllTypes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TestAllTypes.Unmarshal(m, b)
}
func (m *TestAllTypes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TestAllTypes.Marshal(b, m, deterministic)
}
func (dst *TestAllTypes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestAllTypes.Merge(dst, src)
}
func (m *TestAllTypes) XXX_Size() int {
	return xxx_messageInfo_TestAllTypes.Size(m)
}
func (m *TestAllTypes) XXX_DiscardUnknown() {
	xxx_messageInfo_TestAllTypes.DiscardUnknown(m)
}

var xxx_messageInfo_TestAllTypes proto.InternalMessageInfo

func (m *TestAllTypes) GetSingleInt32() int32 {
	if m != nil {
		return m.SingleInt32
	}
	return 0
}

func (m *TestAllTypes) GetSingleInt64() int64 {
	if m != nil {
		return m.SingleInt64
	}
	return 0
}

func (m *TestAllTypes) GetSingleUint32() uint32 {
	if m != nil {
		return m.SingleUint32
	}
	return 0
}

func (m *TestAllTypes) GetSingleUint64() uint64 {
	if m != nil {
		return m.SingleUint64
	}
	return 0
}

func (m *TestAllTypes) GetSingleSint32() int32 {
	if m != nil {
		return m.SingleSint32
	}
	return 0
}

func (m *TestAllTypes) GetSingleSint64() int64 {
	if m != nil {
		return m.SingleSint64
	}
	return 0
}

func (m *TestAllTypes) GetSingleFixed32() uint32 {
	if m != nil {
		return m.SingleFixed32
	}
	return 0
}

func (m *TestAllTypes) GetSingleFixed64() uint64 {
	if m != nil {
		return m.SingleFixed64
	}
	return 0
}

func (m *TestAllTypes) GetSingleSfixed32() int32 {
	if m != nil {
		return m.SingleSfixed32
	}
	return 0
}

func (m *TestAllTypes) GetSingleSfixed64() int64 {
	if m != nil {
		return m.SingleSfixed64
	}
	return 0
}

func (m *TestAllTypes) GetSingleFloat() float32 {
	if m != nil {
		return m.SingleFloat
	}
	return 0
}

func (m *TestAllTypes) GetSingleDouble() float64 {
	if m != nil {
		return m.SingleDouble
	}
	return 0
}

func (m *TestAllTypes) GetSingleBool() bool {
	if m != nil {
		return m.SingleBool
	}
	return false
}

func (m *TestAllTypes) GetSingleString() string {
	if m != nil {
		return m.SingleString
	}
	return ""
}

func (m *TestAllTypes) GetSingleBytes() []byte {
	if m != nil {
		return m.SingleBytes
	}
	return nil
}

func (m *TestAllTypes) GetSingleAny() *any.Any {
	if m != nil {
		return m.SingleAny
	}
	return nil
}

func (m *TestAllTypes) GetSingleDuration() *duration.Duration {
	if m != nil {
		return m.SingleDuration
	}
	return nil
}

func (m *TestAllTypes) GetSingleTimestamp() *timestamp.Timestamp {
	if m != nil {
		return m.SingleTimestamp
	}
	return nil
}

func (m *TestAllTypes) GetSingleStruct() *_struct.Struct {
	if m != nil {
		return m.SingleStruct
	}
	return nil
}

func (m *TestAllTypes) GetSingleValue() *_struct.Value {
	if m != nil {
		return m.SingleValue
	}
	return nil
}

func (m *TestAllTypes) GetSingleInt64Wrapper() *wrappers.Int64Value {
	if m != nil {
		return m.SingleInt64Wrapper
	}
	return nil
}

func (m *TestAllTypes) GetSingleInt32Wrapper() *wrappers.Int32Value {
	if m != nil {
		return m.SingleInt32Wrapper
	}
	return nil
}

func (m *TestAllTypes) GetSingleDoubleWrapper() *wrappers.DoubleValue {
	if m != nil {
		return m.SingleDoubleWrapper
	}
	return nil
}

func (m *TestAllTypes) GetSingleFloatWrapper() *wrappers.FloatValue {
	if m != nil {
		return m.SingleFloatWrapper
	}
	return nil
}

func (m *TestAllTypes) GetSingleUint64Wrapper() *wrappers.UInt64Value {
	if m != nil {
		return m.SingleUint64Wrapper
	}
	return nil
}

func (m *TestAllTypes) GetSingleUint32Wrapper() *wrappers.UInt32Value {
	if m != nil {
		return m.SingleUint32Wrapper
	}
	return nil
}

func (m *TestAllTypes) GetSingleStringWrapper() *wrappers.StringValue {
	if m != nil {
		return m.SingleStringWrapper
	}
	return nil
}

func (m *TestAllTypes) GetSingleBoolWrapper() *wrappers.BoolValue {
	if m != nil {
		return m.SingleBoolWrapper
	}
	return nil
}

func (m *TestAllTypes) GetSingleBytesWrapper() *wrappers.BytesValue {
	if m != nil {
		return m.SingleBytesWrapper
	}
	return nil
}

type isTestAllTypes_NestedType interface {
	isTestAllTypes_NestedType()
}

type TestAllTypes_SingleNestedMessage struct {
	SingleNestedMessage *TestAllTypes_NestedMessage `protobuf:"bytes,18,opt,name=single_nested_message,json=singleNestedMessage,proto3,oneof"`
}

type TestAllTypes_SingleNestedEnum struct {
	SingleNestedEnum TestAllTypes_NestedEnum `protobuf:"varint,21,opt,name=single_nested_enum,json=singleNestedEnum,proto3,enum=google.expr.proto3.test.TestAllTypes_NestedEnum,oneof"`
}

func (*TestAllTypes_SingleNestedMessage) isTestAllTypes_NestedType() {}

func (*TestAllTypes_SingleNestedEnum) isTestAllTypes_NestedType() {}

func (m *TestAllTypes) GetNestedType() isTestAllTypes_NestedType {
	if m != nil {
		return m.NestedType
	}
	return nil
}

func (m *TestAllTypes) GetSingleNestedMessage() *TestAllTypes_NestedMessage {
	if x, ok := m.GetNestedType().(*TestAllTypes_SingleNestedMessage); ok {
		return x.SingleNestedMessage
	}
	return nil
}

func (m *TestAllTypes) GetSingleNestedEnum() TestAllTypes_NestedEnum {
	if x, ok := m.GetNestedType().(*TestAllTypes_SingleNestedEnum); ok {
		return x.SingleNestedEnum
	}
	return TestAllTypes_FOO
}

func (m *TestAllTypes) GetRepeatedInt32() []int32 {
	if m != nil {
		return m.RepeatedInt32
	}
	return nil
}

func (m *TestAllTypes) GetRepeatedInt64() []int64 {
	if m != nil {
		return m.RepeatedInt64
	}
	return nil
}

func (m *TestAllTypes) GetRepeatedUint32() []uint32 {
	if m != nil {
		return m.RepeatedUint32
	}
	return nil
}

func (m *TestAllTypes) GetRepeatedUint64() []uint64 {
	if m != nil {
		return m.RepeatedUint64
	}
	return nil
}

func (m *TestAllTypes) GetRepeatedSint32() []int32 {
	if m != nil {
		return m.RepeatedSint32
	}
	return nil
}

func (m *TestAllTypes) GetRepeatedSint64() []int64 {
	if m != nil {
		return m.RepeatedSint64
	}
	return nil
}

func (m *TestAllTypes) GetRepeatedFixed32() []uint32 {
	if m != nil {
		return m.RepeatedFixed32
	}
	return nil
}

func (m *TestAllTypes) GetRepeatedFixed64() []uint64 {
	if m != nil {
		return m.RepeatedFixed64
	}
	return nil
}

func (m *TestAllTypes) GetRepeatedSfixed32() []int32 {
	if m != nil {
		return m.RepeatedSfixed32
	}
	return nil
}

func (m *TestAllTypes) GetRepeatedSfixed64() []int64 {
	if m != nil {
		return m.RepeatedSfixed64
	}
	return nil
}

func (m *TestAllTypes) GetRepeatedFloat() []float32 {
	if m != nil {
		return m.RepeatedFloat
	}
	return nil
}

func (m *TestAllTypes) GetRepeatedDouble() []float64 {
	if m != nil {
		return m.RepeatedDouble
	}
	return nil
}

func (m *TestAllTypes) GetRepeatedBool() []bool {
	if m != nil {
		return m.RepeatedBool
	}
	return nil
}

func (m *TestAllTypes) GetRepeatedString() []string {
	if m != nil {
		return m.RepeatedString
	}
	return nil
}

func (m *TestAllTypes) GetRepeatedBytes() [][]byte {
	if m != nil {
		return m.RepeatedBytes
	}
	return nil
}

func (m *TestAllTypes) GetRepeatedNestedMessage() []*TestAllTypes_NestedMessage {
	if m != nil {
		return m.RepeatedNestedMessage
	}
	return nil
}

func (m *TestAllTypes) GetRepeatedNestedEnum() []TestAllTypes_NestedEnum {
	if m != nil {
		return m.RepeatedNestedEnum
	}
	return nil
}

func (m *TestAllTypes) GetRepeatedStringPiece() []string {
	if m != nil {
		return m.RepeatedStringPiece
	}
	return nil
}

func (m *TestAllTypes) GetRepeatedCord() []string {
	if m != nil {
		return m.RepeatedCord
	}
	return nil
}

func (m *TestAllTypes) GetRepeatedLazyMessage() []*TestAllTypes_NestedMessage {
	if m != nil {
		return m.RepeatedLazyMessage
	}
	return nil
}

func (m *TestAllTypes) GetMapStringString() map[string]string {
	if m != nil {
		return m.MapStringString
	}
	return nil
}

func (m *TestAllTypes) GetMapInt64NestedType() map[int64]*NestedTestAllTypes {
	if m != nil {
		return m.MapInt64NestedType
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*TestAllTypes) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _TestAllTypes_OneofMarshaler, _TestAllTypes_OneofUnmarshaler, _TestAllTypes_OneofSizer, []interface{}{
		(*TestAllTypes_SingleNestedMessage)(nil),
		(*TestAllTypes_SingleNestedEnum)(nil),
	}
}

func _TestAllTypes_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*TestAllTypes)
	// nested_type
	switch x := m.NestedType.(type) {
	case *TestAllTypes_SingleNestedMessage:
		b.EncodeVarint(18<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SingleNestedMessage); err != nil {
			return err
		}
	case *TestAllTypes_SingleNestedEnum:
		b.EncodeVarint(21<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.SingleNestedEnum))
	case nil:
	default:
		return fmt.Errorf("TestAllTypes.NestedType has unexpected type %T", x)
	}
	return nil
}

func _TestAllTypes_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*TestAllTypes)
	switch tag {
	case 18: // nested_type.single_nested_message
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TestAllTypes_NestedMessage)
		err := b.DecodeMessage(msg)
		m.NestedType = &TestAllTypes_SingleNestedMessage{msg}
		return true, err
	case 21: // nested_type.single_nested_enum
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.NestedType = &TestAllTypes_SingleNestedEnum{TestAllTypes_NestedEnum(x)}
		return true, err
	default:
		return false, nil
	}
}

func _TestAllTypes_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*TestAllTypes)
	// nested_type
	switch x := m.NestedType.(type) {
	case *TestAllTypes_SingleNestedMessage:
		s := proto.Size(x.SingleNestedMessage)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *TestAllTypes_SingleNestedEnum:
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(x.SingleNestedEnum))
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type TestAllTypes_NestedMessage struct {
	Bb                   int32    `protobuf:"varint,1,opt,name=bb,proto3" json:"bb,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TestAllTypes_NestedMessage) Reset()         { *m = TestAllTypes_NestedMessage{} }
func (m *TestAllTypes_NestedMessage) String() string { return proto.CompactTextString(m) }
func (*TestAllTypes_NestedMessage) ProtoMessage()    {}
func (*TestAllTypes_NestedMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_test_all_types_5b2f71f34215a338, []int{0, 0}
}
func (m *TestAllTypes_NestedMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TestAllTypes_NestedMessage.Unmarshal(m, b)
}
func (m *TestAllTypes_NestedMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TestAllTypes_NestedMessage.Marshal(b, m, deterministic)
}
func (dst *TestAllTypes_NestedMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestAllTypes_NestedMessage.Merge(dst, src)
}
func (m *TestAllTypes_NestedMessage) XXX_Size() int {
	return xxx_messageInfo_TestAllTypes_NestedMessage.Size(m)
}
func (m *TestAllTypes_NestedMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_TestAllTypes_NestedMessage.DiscardUnknown(m)
}

var xxx_messageInfo_TestAllTypes_NestedMessage proto.InternalMessageInfo

func (m *TestAllTypes_NestedMessage) GetBb() int32 {
	if m != nil {
		return m.Bb
	}
	return 0
}

type NestedTestAllTypes struct {
	Child                *NestedTestAllTypes `protobuf:"bytes,1,opt,name=child,proto3" json:"child,omitempty"`
	Payload              *TestAllTypes       `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *NestedTestAllTypes) Reset()         { *m = NestedTestAllTypes{} }
func (m *NestedTestAllTypes) String() string { return proto.CompactTextString(m) }
func (*NestedTestAllTypes) ProtoMessage()    {}
func (*NestedTestAllTypes) Descriptor() ([]byte, []int) {
	return fileDescriptor_test_all_types_5b2f71f34215a338, []int{1}
}
func (m *NestedTestAllTypes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NestedTestAllTypes.Unmarshal(m, b)
}
func (m *NestedTestAllTypes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NestedTestAllTypes.Marshal(b, m, deterministic)
}
func (dst *NestedTestAllTypes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NestedTestAllTypes.Merge(dst, src)
}
func (m *NestedTestAllTypes) XXX_Size() int {
	return xxx_messageInfo_NestedTestAllTypes.Size(m)
}
func (m *NestedTestAllTypes) XXX_DiscardUnknown() {
	xxx_messageInfo_NestedTestAllTypes.DiscardUnknown(m)
}

var xxx_messageInfo_NestedTestAllTypes proto.InternalMessageInfo

func (m *NestedTestAllTypes) GetChild() *NestedTestAllTypes {
	if m != nil {
		return m.Child
	}
	return nil
}

func (m *NestedTestAllTypes) GetPayload() *TestAllTypes {
	if m != nil {
		return m.Payload
	}
	return nil
}

func init() {
	proto.RegisterType((*TestAllTypes)(nil), "google.expr.proto3.test.TestAllTypes")
	proto.RegisterMapType((map[int64]*NestedTestAllTypes)(nil), "google.expr.proto3.test.TestAllTypes.MapInt64NestedTypeEntry")
	proto.RegisterMapType((map[string]string)(nil), "google.expr.proto3.test.TestAllTypes.MapStringStringEntry")
	proto.RegisterType((*TestAllTypes_NestedMessage)(nil), "google.expr.proto3.test.TestAllTypes.NestedMessage")
	proto.RegisterType((*NestedTestAllTypes)(nil), "google.expr.proto3.test.NestedTestAllTypes")
	proto.RegisterEnum("google.expr.proto3.test.GlobalEnum", GlobalEnum_name, GlobalEnum_value)
	proto.RegisterEnum("google.expr.proto3.test.TestAllTypes_NestedEnum", TestAllTypes_NestedEnum_name, TestAllTypes_NestedEnum_value)
}

func init() {
	proto.RegisterFile("test/proto3pb/test_all_types.proto", fileDescriptor_test_all_types_5b2f71f34215a338)
}

var fileDescriptor_test_all_types_5b2f71f34215a338 = []byte{
	// 1252 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x57, 0x6d, 0x53, 0xdb, 0x46,
	0x10, 0xe6, 0x2c, 0x5e, 0x0f, 0x1b, 0xcc, 0x01, 0xe5, 0xe2, 0x66, 0xca, 0x05, 0x4a, 0xb9, 0x84,
	0xd6, 0x64, 0x6c, 0x8d, 0xda, 0xd0, 0x76, 0x3a, 0xb8, 0x01, 0xd2, 0x4e, 0x69, 0x32, 0x82, 0xb4,
	0x33, 0xfd, 0xe2, 0x4a, 0xf6, 0xe1, 0xb8, 0xc8, 0x92, 0x2a, 0xc9, 0x6d, 0x9c, 0x4f, 0xfd, 0x19,
	0xfd, 0xb9, 0x1d, 0xdd, 0x8b, 0x7c, 0x92, 0xe2, 0x0e, 0xe1, 0x0b, 0x23, 0xed, 0x3d, 0xfb, 0xec,
	0xee, 0x73, 0xbb, 0x5a, 0x03, 0xf7, 0x12, 0x16, 0x27, 0xc7, 0x61, 0x14, 0x24, 0x41, 0x3b, 0x74,
	0x8f, 0xd3, 0xb7, 0xae, 0xe3, 0x79, 0xdd, 0x64, 0x12, 0xb2, 0xb8, 0xc9, 0xed, 0x68, 0x67, 0x10,
	0x04, 0x03, 0x8f, 0x35, 0xd9, 0xdb, 0x30, 0x12, 0xa6, 0x76, 0x33, 0x05, 0x36, 0x1e, 0x88, 0x03,
	0xe1, 0xee, 0x8e, 0x6f, 0x8e, 0x1d, 0x7f, 0x22, 0x00, 0x8d, 0x4f, 0x8a, 0x47, 0xfd, 0x71, 0xe4,
	0x24, 0xc3, 0xc0, 0x97, 0xe7, 0x0f, 0x8b, 0xe7, 0x71, 0x12, 0x8d, 0x7b, 0x89, 0x3c, 0xdd, 0x2d,
	0x9e, 0x26, 0xc3, 0x11, 0x8b, 0x13, 0x67, 0x14, 0xce, 0xa2, 0xff, 0x3b, 0x72, 0xc2, 0x90, 0x45,
	0x32, 0xe5, 0xbd, 0x7f, 0x1a, 0xb0, 0x7a, 0xcd, 0xe2, 0xe4, 0xd4, 0xf3, 0xae, 0xd3, 0x4a, 0xd0,
	0x23, 0x58, 0x8d, 0x87, 0xfe, 0xc0, 0x63, 0xdd, 0xa1, 0x9f, 0xb4, 0x5b, 0x18, 0x10, 0x40, 0x17,
	0xec, 0x55, 0x61, 0xfb, 0x21, 0x35, 0xe5, 0x21, 0x96, 0x89, 0x2b, 0x04, 0x50, 0x43, 0x83, 0x58,
	0x26, 0xda, 0x87, 0x35, 0x09, 0x19, 0x0b, 0x1a, 0x83, 0x00, 0x5a, 0xb3, 0xa5, 0xdf, 0x6b, 0x6e,
	0x2b, 0x80, 0x2c, 0x13, 0xcf, 0x13, 0x40, 0xe7, 0x75, 0x50, 0x8e, 0x29, 0x16, 0x4c, 0x0b, 0x04,
	0xd0, 0x0d, 0x05, 0xba, 0x2a, 0x32, 0xc5, 0x82, 0x69, 0x91, 0x00, 0x8a, 0x74, 0x90, 0x65, 0xa2,
	0x03, 0xb8, 0x26, 0x41, 0x37, 0xc3, 0xb7, 0xac, 0xdf, 0x6e, 0xe1, 0x25, 0x02, 0xe8, 0x92, 0x2d,
	0x5d, 0xcf, 0x85, 0xb1, 0x08, 0xb3, 0x4c, 0xbc, 0x4c, 0x00, 0x5d, 0xcc, 0xc1, 0x2c, 0x13, 0x1d,
	0xc2, 0x75, 0x15, 0x52, 0xd1, 0xad, 0x10, 0x40, 0xd7, 0x6d, 0xe9, 0x7d, 0x25, 0xad, 0x25, 0xa0,
	0x65, 0x62, 0x48, 0x00, 0xad, 0xe7, 0x81, 0x96, 0xa9, 0xc9, 0x7a, 0xe3, 0x05, 0x4e, 0x82, 0x57,
	0x09, 0xa0, 0x15, 0x25, 0xeb, 0x79, 0x6a, 0xd2, 0xea, 0xec, 0x07, 0x63, 0xd7, 0x63, 0xb8, 0x4a,
	0x00, 0x05, 0xaa, 0xce, 0xe7, 0xdc, 0x86, 0x76, 0xa1, 0xf4, 0xe9, 0xba, 0x41, 0xe0, 0xe1, 0x1a,
	0x01, 0x74, 0xd9, 0x86, 0xc2, 0xd4, 0x09, 0x02, 0x4f, 0x57, 0x2b, 0x89, 0x86, 0xfe, 0x00, 0xaf,
	0x11, 0x40, 0x57, 0x32, 0xb5, 0xb8, 0x4d, 0xcb, 0xc6, 0x9d, 0x24, 0x2c, 0xc6, 0xeb, 0x04, 0xd0,
	0xaa, 0xca, 0xa6, 0x93, 0x9a, 0x50, 0x1b, 0x4a, 0xd6, 0xae, 0xe3, 0x4f, 0x70, 0x9f, 0x00, 0xba,
	0xda, 0xda, 0x6a, 0xca, 0x19, 0x50, 0x0d, 0xd7, 0x3c, 0xf5, 0x27, 0xf6, 0x8a, 0xc0, 0x9d, 0xfa,
	0x13, 0xd4, 0xc9, 0xe4, 0x50, 0x8d, 0x8e, 0x19, 0xf7, 0x7c, 0x50, 0xf2, 0x7c, 0x2e, 0x01, 0x4a,
	0x29, 0xf5, 0x8e, 0xce, 0x60, 0x5d, 0x72, 0x64, 0xed, 0x8e, 0x6f, 0x38, 0x49, 0xa3, 0x44, 0x72,
	0xad, 0x10, 0xb6, 0x8c, 0x9b, 0x19, 0xd0, 0x37, 0xba, 0x0e, 0xe3, 0x5e, 0x82, 0x07, 0x9c, 0x63,
	0xa7, 0xc4, 0x71, 0xc5, 0x8f, 0x35, 0x81, 0xc6, 0xbd, 0x04, 0x3d, 0xcb, 0x04, 0xfa, 0xcb, 0xf1,
	0xc6, 0x0c, 0xbf, 0xe1, 0xce, 0x1f, 0x95, 0x9c, 0x7f, 0x49, 0x4f, 0x95, 0x70, 0xfc, 0x05, 0x5d,
	0xc2, 0x2d, 0x7d, 0x80, 0xba, 0x72, 0x26, 0xf1, 0x90, 0x53, 0x7c, 0x5c, 0xa2, 0xe0, 0x33, 0x25,
	0x78, 0x90, 0x36, 0x65, 0xbf, 0x0a, 0xb7, 0x3c, 0x5d, 0xbb, 0x95, 0xd1, 0xfd, 0x31, 0x9b, 0xae,
	0xdd, 0x2a, 0xd2, 0xb5, 0x5b, 0x8a, 0xee, 0x15, 0xdc, 0xce, 0x35, 0x59, 0xc6, 0x77, 0xcb, 0xf9,
	0x1e, 0x96, 0xef, 0x89, 0xc3, 0x04, 0xe1, 0xa6, 0xde, 0x8a, 0xe5, 0x04, 0x79, 0x67, 0x67, 0x84,
	0xde, 0x8c, 0x04, 0x79, 0xb3, 0xe7, 0x12, 0xe4, 0x96, 0x72, 0x82, 0xe3, 0xbc, 0x7e, 0xa3, 0x19,
	0x09, 0xbe, 0xd6, 0x04, 0xdc, 0xd4, 0xbf, 0x2e, 0xef, 0x67, 0xd4, 0x24, 0xf4, 0xff, 0x87, 0x51,
	0x69, 0xb8, 0xa9, 0x7f, 0xd4, 0xca, 0x8c, 0x62, 0xc6, 0x32, 0xc6, 0x60, 0x06, 0xa3, 0x18, 0xbb,
	0x1c, 0xa3, 0x30, 0x29, 0xc6, 0x1f, 0xe1, 0xa6, 0x36, 0xd6, 0x19, 0x5f, 0x38, 0xa3, 0xef, 0xd3,
	0x49, 0x17, 0x6c, 0x1b, 0xd3, 0xd1, 0x2f, 0x5f, 0x08, 0x1f, 0xee, 0x8c, 0xec, 0xcf, 0x19, 0x17,
	0xc2, 0xe7, 0x3d, 0x77, 0x21, 0xdc, 0xa2, 0xe8, 0x86, 0x59, 0xb1, 0x3e, 0x8b, 0x13, 0xd6, 0xef,
	0x8e, 0x58, 0x1c, 0x3b, 0x03, 0x86, 0x11, 0xe7, 0x6b, 0x37, 0x67, 0xec, 0xc5, 0xa6, 0xbe, 0x79,
	0x9a, 0x3f, 0x73, 0xdf, 0x4b, 0xe1, 0xfa, 0x62, 0x4e, 0xa9, 0x90, 0x33, 0xa3, 0xdf, 0x21, 0xca,
	0x87, 0x62, 0xfe, 0x78, 0x84, 0xb7, 0x09, 0xa0, 0x6b, 0xad, 0xa7, 0x1f, 0x12, 0xe7, 0xcc, 0x1f,
	0x8f, 0x5e, 0xcc, 0xd9, 0x75, 0x3d, 0x48, 0x6a, 0x4b, 0xbf, 0xff, 0x11, 0x0b, 0x99, 0x93, 0x92,
	0x8b, 0x8d, 0xb3, 0x4b, 0x0c, 0xba, 0x60, 0xd7, 0x94, 0x55, 0x2c, 0xc1, 0x02, 0xcc, 0x32, 0x31,
	0x21, 0x06, 0x35, 0x72, 0x30, 0xb1, 0x26, 0x32, 0x98, 0x5c, 0x85, 0x8f, 0x88, 0x41, 0x6b, 0x76,
	0xe6, 0x2d, 0x97, 0x61, 0x11, 0x68, 0x99, 0x78, 0x8f, 0x18, 0x74, 0x3e, 0x0f, 0x2c, 0x30, 0xca,
	0x95, 0xb8, 0x4f, 0x0c, 0xba, 0x31, 0x05, 0x5e, 0x95, 0x19, 0xe5, 0x5a, 0xfc, 0x94, 0x18, 0x14,
	0xe5, 0x81, 0x96, 0x89, 0x1e, 0xc3, 0x7a, 0x06, 0x54, 0xbb, 0xec, 0x80, 0x18, 0x74, 0xc9, 0xce,
	0x08, 0xd4, 0x72, 0x2c, 0x41, 0x2d, 0x13, 0x7f, 0x46, 0x0c, 0xba, 0x58, 0x80, 0x5a, 0x26, 0x3a,
	0x82, 0x1b, 0xd3, 0xf0, 0x8a, 0xf6, 0x90, 0x18, 0x74, 0xdd, 0xce, 0x38, 0xb2, 0x25, 0x59, 0x06,
	0x5b, 0x26, 0xa6, 0xc4, 0xa0, 0xf5, 0x22, 0x58, 0x2c, 0xf2, 0x69, 0x12, 0x7c, 0x55, 0x3e, 0x26,
	0x06, 0xad, 0x4c, 0xa5, 0x17, 0xcb, 0x52, 0xaf, 0x5f, 0xae, 0xcb, 0x27, 0xc4, 0xa0, 0x60, 0x5a,
	0xbf, 0x5c, 0x98, 0xfb, 0x30, 0xf3, 0x14, 0x2b, 0xf3, 0x88, 0x18, 0x74, 0xd9, 0xae, 0x2a, 0x23,
	0x5f, 0x9a, 0x39, 0x35, 0xc5, 0xda, 0xfc, 0x9c, 0x18, 0x74, 0x45, 0x53, 0x53, 0x2c, 0x4e, 0x3d,
	0x3b, 0xb1, 0x3a, 0xbf, 0x20, 0x06, 0xad, 0x4e, 0xb3, 0x13, 0xcb, 0xf3, 0x16, 0xee, 0x64, 0xb0,
	0xc2, 0xd4, 0x3c, 0x25, 0xc6, 0x3d, 0xa7, 0xc6, 0xde, 0x56, 0x9c, 0xf9, 0xa9, 0x71, 0xe1, 0x56,
	0x31, 0x18, 0x9f, 0x9b, 0x36, 0x31, 0xee, 0x33, 0x37, 0x36, 0xca, 0x87, 0xe1, 0x73, 0x63, 0xc1,
	0xed, 0x82, 0x40, 0xdd, 0x70, 0xc8, 0x7a, 0x0c, 0x5b, 0xa9, 0x4c, 0x9d, 0xca, 0x72, 0xc5, 0xde,
	0xcc, 0x4b, 0xf5, 0x2a, 0x3d, 0x46, 0x87, 0x9a, 0xfa, 0xbd, 0x20, 0xea, 0xe3, 0x2f, 0x25, 0x1e,
	0x4c, 0x6f, 0xe0, 0xfb, 0x20, 0xea, 0xa3, 0x5b, 0x2d, 0x80, 0xe7, 0xbc, 0x9b, 0x64, 0x7a, 0x3d,
	0xbb, 0xb7, 0x5e, 0x9d, 0x0a, 0x05, 0xd3, 0xac, 0x7e, 0x72, 0xde, 0x4d, 0x94, 0x62, 0x37, 0x70,
	0x63, 0xe4, 0x84, 0xaa, 0x10, 0x79, 0xe1, 0x27, 0x3c, 0xd0, 0xc9, 0xdd, 0x02, 0x5d, 0x3a, 0xa1,
	0x28, 0x53, 0xfc, 0x3d, 0xf3, 0x93, 0x68, 0x62, 0xaf, 0x8f, 0xf2, 0x56, 0x14, 0xc2, 0xed, 0x34,
	0x8e, 0xd8, 0x63, 0xf2, 0x6a, 0xd2, 0x7f, 0x29, 0xf0, 0xd7, 0x3c, 0xd6, 0xb7, 0x77, 0x8e, 0xc5,
	0x3f, 0x37, 0xa2, 0xb8, 0xd4, 0x26, 0xc2, 0xa1, 0x51, 0xe9, 0xa0, 0xb1, 0x0b, 0x6b, 0xf9, 0xe6,
	0x58, 0x83, 0x15, 0xd7, 0x95, 0xbf, 0xf3, 0x2b, 0xae, 0xdb, 0xe8, 0xc0, 0xad, 0xf7, 0xe5, 0x8e,
	0xea, 0xd0, 0xb8, 0x65, 0x13, 0x0e, 0x5c, 0xb1, 0xd3, 0x47, 0xb4, 0x05, 0x17, 0xc4, 0x6f, 0x9f,
	0x0a, 0xb7, 0x89, 0x97, 0x93, 0xca, 0x57, 0xa0, 0x11, 0xc1, 0x9d, 0x19, 0x39, 0xe9, 0x34, 0x86,
	0xa0, 0x39, 0xd5, 0x69, 0x56, 0x5b, 0x47, 0x33, 0x6b, 0x96, 0x54, 0x5a, 0xe5, 0x5a, 0xcc, 0xbd,
	0x43, 0x08, 0xb5, 0x76, 0x5c, 0x82, 0xc6, 0xf9, 0xcb, 0x97, 0xf5, 0xb9, 0xf4, 0xa1, 0x73, 0x6a,
	0xd7, 0x81, 0x78, 0xf8, 0xad, 0x5e, 0xe9, 0xd4, 0xe0, 0xaa, 0xa6, 0xf4, 0xde, 0xbf, 0x00, 0xa2,
	0x32, 0x73, 0x9a, 0x55, 0xef, 0xcd, 0xd0, 0xeb, 0xf3, 0x4c, 0x3f, 0x34, 0x2b, 0xee, 0x89, 0xbe,
	0x83, 0x4b, 0xa1, 0x33, 0xf1, 0x02, 0xa7, 0x2f, 0x4b, 0x3b, 0xb8, 0xd3, 0x75, 0xda, 0xca, 0xeb,
	0xc9, 0x21, 0x84, 0x17, 0x5e, 0xe0, 0x3a, 0x9e, 0x2a, 0xe9, 0x42, 0x95, 0x74, 0xa1, 0x4a, 0xba,
	0x48, 0x4b, 0x72, 0x17, 0x05, 0xd7, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x20, 0xb0, 0xda, 0xa7,
	0xa6, 0x0e, 0x00, 0x00,
}
