load("@io_bazel_rules_go//go:def.bzl", "go_test")
load("//conformance:conformance_test.bzl", "conformance_test")

package(
    licenses = ["notice"],  # Apache 2.0
)

_ALL_TESTS = [
    "@com_google_cel_spec//tests/simple:testdata/basic.textproto",
    "@com_google_cel_spec//tests/simple:testdata/bindings_ext.textproto",
    "@com_google_cel_spec//tests/simple:testdata/comparisons.textproto",
    "@com_google_cel_spec//tests/simple:testdata/conversions.textproto",
    "@com_google_cel_spec//tests/simple:testdata/dynamic.textproto",
    "@com_google_cel_spec//tests/simple:testdata/encoders_ext.textproto",
    "@com_google_cel_spec//tests/simple:testdata/enums.textproto",
    "@com_google_cel_spec//tests/simple:testdata/fields.textproto",
    "@com_google_cel_spec//tests/simple:testdata/fp_math.textproto",
    "@com_google_cel_spec//tests/simple:testdata/integer_math.textproto",
    "@com_google_cel_spec//tests/simple:testdata/lists.textproto",
    "@com_google_cel_spec//tests/simple:testdata/logic.textproto",
    "@com_google_cel_spec//tests/simple:testdata/macros.textproto",
    "@com_google_cel_spec//tests/simple:testdata/math_ext.textproto",
    "@com_google_cel_spec//tests/simple:testdata/namespace.textproto",
    "@com_google_cel_spec//tests/simple:testdata/optionals.textproto",
    "@com_google_cel_spec//tests/simple:testdata/parse.textproto",
    "@com_google_cel_spec//tests/simple:testdata/plumbing.textproto",
    "@com_google_cel_spec//tests/simple:testdata/proto2.textproto",
    "@com_google_cel_spec//tests/simple:testdata/proto2_ext.textproto",
    "@com_google_cel_spec//tests/simple:testdata/proto3.textproto",
    "@com_google_cel_spec//tests/simple:testdata/string.textproto",
    "@com_google_cel_spec//tests/simple:testdata/string_ext.textproto",
    "@com_google_cel_spec//tests/simple:testdata/timestamps.textproto",
    "@com_google_cel_spec//tests/simple:testdata/unknowns.textproto",
    "@com_google_cel_spec//tests/simple:testdata/wrappers.textproto",
]

_TESTS_TO_SKIP = [
    "comparisons/eq_literal/eq_mixed_types_error,eq_list_elem_mixed_types_error,eq_map_value_mixed_types_error",
    "comparisons/ne_literal/ne_mixed_types_error",
    "comparisons/in_list_literal/elem_in_mixed_type_list_error",
    "comparisons/in_map_literal/key_in_mixed_key_type_map_error",
    "macros/exists/list_elem_type_exhaustive,map_key_type_exhaustive",

    # Failing conformance tests.
    "fields/qualified_identifier_resolution/map_key_float,map_key_null,map_value_repeat_key",
    "fields/qualified_identifier_resolution/map_value_repeat_key_heterogeneous",
    "macros/map/map_extract_keys",
    "timestamps/duration_converters/get_milliseconds",

    # Future enhancments.
    "enums/strong_proto2",
    "enums/strong_proto3",
]

go_test(
    name = "go_default_test",
    size = "small",
    srcs = [
        "conformance_test.go",
    ],
    tags = [
        "manual",
        "notap",
    ],
    deps = [
        "//cel:go_default_library",
        "//common:go_default_library",
        "//common/types:go_default_library",
        "//common/types/ref:go_default_library",
        "//ext:go_default_library",
        "@com_github_google_go_cmp//cmp:go_default_library",
        "@com_google_cel_spec//proto/test/v1:testpb_go_proto",
        "@com_google_cel_spec//proto/test/v1/proto2:test_all_types_go_proto",
        "@com_google_cel_spec//proto/test/v1/proto3:test_all_types_go_proto",
        "@io_bazel_rules_go//go/runfiles",
        "@org_golang_google_genproto_googleapis_api//expr/v1alpha1:go_default_library",
        "@org_golang_google_protobuf//encoding/prototext:go_default_library",
        "@org_golang_google_protobuf//testing/protocmp:go_default_library",
    ],
)

conformance_test(
    name = "conformance",
    dashboard = False,
    data = _ALL_TESTS,
    skip_tests = _TESTS_TO_SKIP,
)

conformance_test(
    name = "conformance_dashboard",
    dashboard = True,
    data = _ALL_TESTS,
)
